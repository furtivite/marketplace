"use strict";

const {isPathRelative, getNormalizedPath} = require("../../utils/helpers");
const path = require("path");

module.exports = {
  meta: {
    // eslint-disable-next-line eslint-plugin/require-meta-type
    type: `problem`, // `problem`, `suggestion`, or `layout`
    docs: {
      description:
        "Feature-Sliced Design architectural methodology for relative path checker",
      category: "FSD/relative path checker",
      recommended: false,
      url: null, // URL to the documentation page for this rule
      // url: createLinkToRule('path-checker')
    },
    fixable: null, // Or `code` or `whitespace`
    schema: [
      {
        type: 'object',
        properties: {
          alias: {
            type: 'string'
          }
        }
      }
    ], // Add a schema if the rule has options
  },

  create(context) {
    const alias = context.options[0]?.alias || '';

    return {
      ImportDeclaration(node) {
        try {
          // example app/entities/Article
          const value = node.source.value;
          const importTo = alias ? value.replace(`${alias}/`, '') : value;


          // example C:\Users\tim\Desktop\javascript\production_project\src\entities\Article
          const fromFilename = context.getFilename();

          if (shouldBeRelative(fromFilename, importTo)) {
            context.report({
              node: node,
              message: "Within a single slice, all paths must be relative",
              // fix: (fixer)=> {
              //   console.log(getNormalizedPath(fromFilename))
              //   const normalizedPath = getNormalizedPath(fromFilename)
              //       .split('/')
              //       .slice(0,-1)
              //       .join('/');
              //   let relativePath = path.relative(normalizedPath, `/${importTo}`)
              //       .split('\\')
              //       .join('/');
              //   if (!relativePath.startsWith('.')){
              //     relativePath = './' + relativePath;
              //   }
              //
              //   return fixer.replaceText(node.source, `'${relativePath}'`)
              // }
            });
          }
        }catch (e) {
          console.log(e)
        }
      },
    };
  },
};

const layers = {
  entities: "entities",
  features: "features",
  shared: "shared",
  pages: "pages",
  widgets: "widgets",
};

function shouldBeRelative(from, to) {
  if (isPathRelative(to)) {
    return false;
  }

  // example entities/Article
  const toArray = to.split("/");
  const toLayer = toArray[0]; // entities
  const toSlice = toArray[1]; // Article

  if (!toLayer || !toSlice || !layers[toLayer]) {
    return false;
  }

  // normalize path
  const fromArray = getNormalizedPath(from);
  const fromLayer = fromArray[1];
  const fromSlice = fromArray[2];

  if (!fromLayer || !fromSlice || !layers[fromLayer]) {
    return false;
  }

  return fromSlice === toSlice && toLayer === fromLayer;
}
